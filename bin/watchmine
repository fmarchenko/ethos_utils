#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import configparser
import signal

from ethos_utils import logger as ethos_utils_logger
from ethos_utils.watchers import *

config = configparser.ConfigParser()
config.read(['defaults.ini', os.path.expanduser('~/.ethos_utils.ini')])
config_watchmine = config[os.path.basename(__file__)]

logger = ethos_utils_logger.getChild(os.path.basename(__file__))


def handler(loop):
    loop.remove_signal_handler(signal.SIGTERM)
    loop.stop()


@asyncio.coroutine
def main(loop):
    logger.info('Run watchers for diagnostic all components of a system.')
    uptime = 0
    while True:
        watchers = map(lambda x: x(**dict(config_watchmine)).run(), base.BaseWatcher.__subclasses__())
        with open('/proc/uptime', 'r') as fin:
            uptime = float(fin.read().split(' ')[0]) / 60.0

        if uptime > config_watchmine.getfloat('start_timeout', 1):
            yield from asyncio.wait(watchers)
        yield from asyncio.sleep(60 * config_watchmine.getfloat('task_period_timeout', 5))

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.add_signal_handler(signal.SIGTERM, handler, loop)
    loop.create_task(main(loop))
    try:
        loop.run_forever()
    finally:
        loop.close()
